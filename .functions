#!/bin/bash

#
# source /home/chicks/.functions
#
# to get these funcitons in your script.
#

# RH or Deb/Ub/Mint?
#
# set CHICKOS environment variable with RPM_CENTOS or DEB_MINT or broken_shit
#
function check_os {
	export CHICKOS=broken_shit

	if [[ -f /etc/redhat-release ]]
	then
		CHICKOS=RPM_CENTOS
	else
		if [[ -f /etc/debian_version ]]
		then
			CHICKOS=DEB_MINT
		else
			echo dunno, left CHICKOS=$CHICKOS
		fi
	fi
}

function install_packages {
	check_packages -i
}

function check_packages {
	check_os # set CHICKOS
	DONESTAMP_BASENAME=.done.check_packages
	DONESTAMP=~/$DONESTAMP_BASENAME

	echo "check_packages($1)..."
	INSTALLNOW=0

	if [[ -n $1 ]]
	then
		# got arguments, ignore timestamps

		if [[ "$1" == "-i" ]]
		then
			INSTALLNOW=1
		else
			echo unknown argument: "'$1'"
		fi

	else
		# no arguments

		if [[ -f $DONESTAMP ]];
		then
#			echo $DONESTAMP exists
			#echo find ~ -name $DONESTAMP_BASENAME -maxdepth 1 -mtime '+0h55m'
			find ~ -maxdepth 1 -name $DONESTAMP_BASENAME -mmin -20 > /dev/null
			find_ret=$?
#			echo find returned $find_ret

			if [[ $find_ret -gt 0 ]];
			then
				echo actually running this time
			else
				echo SKIPPING running this time
				return
			fi
		fi

	fi

	#
	# UPDATE PACKAGE LISTS HERE
	#
	UNIVERSAL_PKGS="screen mtr perl bash whois pcregrep curl wget tmux arduino git git-svn"
	RPM_PKGS="vim-enhanced"
	DEB_PKGS="vim"
	# mailutils would be nice but it installs server shit

	# you should leave this one blank
	NEED_PKGS=""

	# debian mint
	if [[ $CHICKOS == "DEB_MINT" ]]
	then
		for deb_pkg in $UNIVERSAL_PKGS $DEB_PKGS
		do
			if dpkg-query -W -f '${binary:Package}\n' | grep "^$deb_pkg\$" > /dev/null 
			then
				#echo -e "\t$deb_pkg IS installed"
				true
			else
				echo -e "\t$deb_pkg is not installed"
				NEED_PKGS="$NEED_PKGS $deb_pkg"
			fi
		done
		if [[ -n $NEED_PKGS ]]
		then
			CMD="sudo apt-get install $NEED_PKGS"
			if [[ $INSTALLNOW -gt 0 ]]
			then
				$CMD
			else
				# don't install now
				echo  -e "\t#### $CMD"
				echo  -e "\t# or check_packages -i"
			fi
		fi
	fi

	# rpm centos
	if [[ $CHICKOS == "RPM_CENTOS" ]]
	then
		for rpm_pkg in $UNIVERSAL_PKGS $RPM_PKGS
		do
			if rpm -q --quiet $rpm_pkg 
			then
				#echo -e "\t$rpm_pkg IS installed"
				true
			else
				echo -e "\t$rpm_pkg is not installed"
				NEED_PKGS="$NEED_PKGS $rpm_pkg"
			fi
		done
		if [[ -n $NEED_PKGS ]]
		then
			CMD="sudo yum install $NEED_PKGS"
			if [[ $INSTALLNOW -gt 0 ]]
			then
				$CMD
			else
				# don't install now
				echo  -e "\t#### $CMD"
				echo  -e "\t# or check_packages -i"
			fi
		fi
	fi

	echo "check done."
	touch $DONESTAMP
}

#
function check_all_permissions {
	echo checking ~/.ssh/\* permisisons...

	# should always exist
	check_file_permissions ~/.ssh 700
	check_file_permissions ~/.ssh/config 600
	check_file_permissions ~/.ssh/authorized_keys 644

	# should be optional
	if [[ -e ~/.ssh/id_rsa ]]
	then
		check_file_permissions ~/.ssh/id_rsa 600
		check_file_permissions ~/.ssh/id_rsa.pub 644
	else
		echo -e "\tyour local ssh key is missing"
	fi
}

# arguments: filename permisison
function check_file_permissions {
	if [[ $# -lt 2 ]]
	then
		echo you need 2 arguments to 'check_permissions()', not $#
		exit 3
	fi

	if [[ $# -gt 2 ]]
	then
		echo you need 2 arguments, not $# to 'check_permisisons()'
		exit 3
	fi

	FILE=$1
	DESIRED=$2

	get_perm $FILE # set RETURN_PERM
	ACTUAL=$RETURN_PERM

	if [[ $ACTUAL != $DESIRED ]]
	then
		echo -e "\t$FILE has $ACTUAL permissions instead of desired $DESIRED"
	fi
}

# arguments: filename
# returns value in $RETURN_PERM
function get_perm {
	if [[ $# -lt 1 ]]
	then
		echo you need to pass filenames 'get_perm()'
		return 1
	fi

	FILE=$1

	# we want -e not -f so we can get permissions on non-files
	if [[ ! -e $FILE ]]
	then
		echo "get_perm($FILE): no such file"
		return 2
	fi

	RET=`stat -c %a $FILE`
#	echo got $RET for $FILE
	RETURN_PERM=$RET

	return 0
}

function is_interactive {
	RET=3

	if [[ -z $PS1 ]] # no prompt?
	### if [ -v PS1 ]   # On Bash 4.2+ ...
	then
		# non-interactive
		RET=0
	else
		# interactive
		RET=1
	fi

#	echo return $RET
	return $RET
}

#echo processed all of .functions
