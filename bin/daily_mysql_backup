#!/usr/bin/perl -w

# daily_mysql_backup
#
# args:
#	-s server	target server
#	-a		all databases
#	DB1 DB2 DB3
#
# TODO:
# * process args
# * everything

use strict;
use AppConfig;
use Sys::Hostname;
use Socket; # for inet_ntoa

#
# CONFIGURATION
#

# create a new AppConfig object
my $app_config = {};
my $config = AppConfig->new( $app_config );

# define variables
$config->define( 's|server=s' );	# target server
$config->define( 'a|all!' );		# all databases

# read configuration file
my $config_file = '/etc/fini/daily_mysql_backup.conf';
if (-r $config_file) {
	$config->file($config_file);
}

# parse command line options
$config->args();      # default to \@ARGV

#$config->varname($value);
#$config->varname;

# validate
my $remote_server = $config->server or die "no server";
# server validation is below under "check connectivity"

my $all = $config->all;
my @databases = @ARGV;
unless (scalar @databases or $all) {
	die "no databases to backup, list some or specify -all";
}

if (scalar @databases and $all) {
	warn "superfulous database specification when -all catches all databases";
}

#
# get local hostname
#
my $local_hostname = hostname;
die "no local hostname" unless length $local_hostname;

my $local_hostname_short = $local_hostname;
$local_hostname_short =~ s/\..*$//; # remove everything after initial dot

#
# check connectivity and disk space to server
#

# lookup ip for remote
my $packed_remote_ip = gethostbyname($remote_server);
die "lookup failed for $remote_server: $!" unless defined $packed_remote_ip;
my $remote_ip = inet_ntoa($packed_remote_ip);

# ssh df
#die "unimplemented";
my $command = "ssh $remote_server 'df -h /home'";
system($command) or die "'ssh $remote_server df' failed: $!";

print "backing up from $local_hostname_short to $remote_server [$remote_ip]\n";

#
# detect mysql tools flavor
#

my $env_path = $ENV{PATH} or die "no PATH in the environment";
my @path_dirs = split (/:/,$env_path);

my $xtra_found = 0;
foreach my $dir (@path_dirs) {
	if (-x 'xtrabackup') {
		$xtra_found = $dir;
		last;
	}
}

my $backup_command = 'xtrabackup';
if ($xtra_found) {
	print "xtrabackup found in $xtra_found\n";
} else {
	# do it with mysqlbackup
	$backup_command = 'mysqlbackup';
	die "untested";
}

#
# backup to local text file
#

die "unimplemented";

#
# rsync to remote server
#

die "unimplemented";

#
# kick off diff/compress on remote server
#

die "unimplemented";

#
# SUBROUTINES
#

__END__
