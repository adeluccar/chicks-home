#!/usr/bin/perl -w

# daily_mysql_backup
#
# args:
#	-s server	target server
#	-a		all databases
#	DB1 DB2 DB3
#
# TODO:
# * process args
# * everything

use strict;
use AppConfig;
use Sys::Hostname;
use Socket; # for inet_ntoa
use IPC::Run qw( run timeout );

#
# CONFIGURATION
#

# create a new AppConfig object
my $app_config = {};
my $config = AppConfig->new( $app_config );

# define variables
$config->define( 's|server=s' );	# target server
$config->define( 'd|dir|localdir=s' );	# local work directory
$config->define( 'a|all!' );		# all databases

# read configuration file
my $config_file = '/etc/fini/daily_mysql_backup.conf';
if (-r $config_file) {
	$config->file($config_file);
}

# parse command line options
$config->args();      # default to \@ARGV

#$config->varname($value);
#$config->varname;

# validate
my $remote_server = $config->server or die "no server";
# server validation is below under "check connectivity"

my $all = $config->all;
my @databases = @ARGV;
unless (scalar @databases or $all) {
	die "no databases to backup, list some or specify -all";
}

if (scalar @databases and $all) {
	warn "superfulous database specification when -all catches all databases";
}

my $local_dir = $config->localdir || $ENV{HOME} . '/Documents/backups/mysql';
die "no directory $local_dir" unless -d $local_dir;

#
# get local hostname
#
my $local_hostname = hostname;
die "no local hostname" unless length $local_hostname;

my $local_hostname_short = $local_hostname;
$local_hostname_short =~ s/\..*$//; # remove everything after initial dot

#
# check connectivity and disk space to server
#

# lookup ip for remote
my $packed_remote_ip = gethostbyname($remote_server);
die "lookup failed for $remote_server: $!" unless defined $packed_remote_ip;
my $remote_ip = inet_ntoa($packed_remote_ip);

# ssh df
my @command = ('ssh', $remote_server, "df -h /home");
#print "COMMAND: ", join(' ', @command), "\n";

my ( $out, $err );
run \@command, '>', \$out, '2>', \$err, timeout(15) or die "remote df failed: $?";
die "no output from remote df" unless length $out;

# Filesystem            Size  Used Avail Use% Mounted on
# /dev/mapper/VolGroup00-LogVol00
#                        33G  4.0G   27G  13% /

my @out_ws = split(/\s+/,$out);
#print "- " . join ("\n- ",@out_ws) . "\n";
my $remote_path_mounted = pop @out_ws;
my $remote_used_percentage = pop @out_ws;
my $remote_free_space_human = pop @out_ws;

my $remote_used_percentage_clean = $remote_used_percentage;
$remote_used_percentage_clean =~ s/%$//;
if ($remote_used_percentage_clean > 80 ) {
	die "free up disk space ($remote_used_percentage > 80)";
} 

if ($remote_free_space_human =~ /G$/) {
	my $remote_free_space_human_clean = $remote_free_space_human;
	$remote_free_space_human_clean =~ s/G$//;
	if ($remote_free_space_human_clean < 2) {
		die "free up disk space ($remote_free_space_human < 2)";
	}
} else {
	die "no gigs, no backups";
}

print "backing up from $local_hostname_short to $remote_server [$remote_ip]\n";
print "  $remote_server:$remote_path_mounted has $remote_used_percentage used and $remote_free_space_human free\n";

#
# detect mysql tools flavor
#

my $env_path = $ENV{PATH} or die "no PATH in the environment";
my @path_dirs = split (/:/,$env_path);

my $xtra_found = 0;
foreach my $dir (@path_dirs) {
	if (-x "$dir/xtrabackup") {
		$xtra_found = $dir;
		last;
	}
}

my $backup_command = 'xtrabackup';
if ($xtra_found) {
	print "  xtrabackup found in $xtra_found, using innobackupex\n";
	$backup_command = "$xtra_found/innobackupex";
	die "missing $backup_command" unless -x $backup_command;
} else {
	# do it with mysqlbackup
	$backup_command = 'mysqlbackup';
	die "  ERROR: mysqldump is untested";
}

#
# verify mysql login
#

my $credentials_filename =  "$ENV{HOME}/.my.cnf";
unless (-f $credentials_filename) {
	die "you need personal mysql credentials - create ~/.my.cnf";
}

if ($all) {
	system('echo "select 3 as c;" | mysql > /dev/null');
} else {
	system('echo "select 3 as c;" | mysql ' . $databases[0] . ' > /dev/null');
}

if ($? == -1) {
	die "  ERROR: mysql check failed to execute: $!\n";
} elsif ($? & 127) {
	printf "child died with signal %d, %s coredump\n",
		($? & 127),  ($? & 128) ? 'with' : 'without';
} elsif ( ($? >> 8) == 0 ) {
	# it worked, move on
} else {
	die sprintf "  ERROR: mysql login check failed: child exited with value %d\n", $? >> 8;
}


#
# backup to local text file
#

my @do_backup_command = ($backup_command, $local_dir);
print "  running ", join(' ', @do_backup_command), "\n";
print "\n";
run \@do_backup_command or die "$backup_command $local_dir failed: $?";

#
# rsync to remote server
#

die "unimplemented";

#
# kick off diff/compress on remote server
#

die "unimplemented";

#
# SUBROUTINES
#

__END__
